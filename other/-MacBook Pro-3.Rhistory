# Create linear regression model
MBTAtotalplot + geom_point(aes(ObjectID, Restriction_Distance_Miles)) +
geom_smooth(aes(ObjectID, Restriction_Distance_Miles), method = "lm")
# Extract Restriction Distance MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Distance_Miles"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
# Create new plot for SR speed for Jan and Feb
MBTAtotalplot <- ggplot(SRspeed)
# Create linear regression model
MBTAtotalplot + geom_point(aes(ObjectID, Restriction_Distance_Miles)) +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(aes(ObjectID, Restriction_Distance_Miles), method = "lm")
# Extract Restriction Distance MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Distance_Miles"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
# Create new plot for SR speed for Jan and Feb
MBTAtotalplot <- ggplot(SRspeed)
# Create linear regression model
MBTAtotalplot + geom_point(aes(ObjectID, Restriction_Distance_Miles)) +
geom_smooth(aes(ObjectID, Restriction_Distance_Miles), method = "lm")
# Extract Restriction Distance MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Distance_Miles"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
# Create new plot for SR speed for Jan and Feb
MBTAtotalplot <- ggplot(SRspeed)
# Create linear regression model
MBTAtotalplot + geom_point(aes(ObjectID, Restriction_Distance_Miles)) +
geom_smooth(aes(ObjectID, Restriction_Distance_Miles), method = "lm", formula = y~x)
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0)
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0)
# Extract Restriction Distance MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Distance_Miles"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
# Create new plot for SR speed for Jan and Feb
MBTAtotalplot <- ggplot(SRspeed)
# Create linear regression model
MBTAtotalplot + geom_point(aes(ObjectID, Restriction_Distance_Miles)) +
geom_smooth(aes(ObjectID, Restriction_Distance_Miles), method = "lm", formula = y~x)
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
xlab("Fitted") +
ylab("Residual")
# Extract Restriction Distance MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Distance_Miles"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
# Create new plot for SR speed for Jan and Feb
MBTAtotalplot <- ggplot(SRspeed)
# Create linear regression model
MBTAtotalplot + geom_point(aes(ObjectID, Restriction_Distance_Miles)) +
geom_smooth(aes(ObjectID, Restriction_Distance_Miles), method = "lm", formula = y~x) +
xlab("Speed Restriction Report ID") +
ylab("Restriction Distance in Miles")
lm(formula = Restriction_Distance_Miles ~ ., data = SRspeed)
lm(formula = Restriction_Distance_Miles ~ ObjectID, data = SRspeed)
lm(formula = Restriction_Distance_Miles ~ ., data = MBTA_Rapid_Transit_Speed_Restrictions)
lm(formula = Restriction_Distance_Miles ~ ., data = MBTA_Rapid_Transit_Speed_Restrictions)
lm(formula = Restriction_Distance_Miles ~ ObjectId, data = MBTA_Rapid_Transit_Speed_Restrictions)
summary(SRspeed)
summary(lm(formula = Restriction_Distance_Miles ~ ObjectId, data = MBTA_Rapid_Transit_Speed_Restrictions))
summary(lm(formula = Restriction_Distance_Miles ~ ObjectId, data = MBTA_Rapid_Transit_Speed_Restrictions))
summary(lm(formula = Restriction_Distance_Miles ~ ., data = MBTA_Rapid_Transit_Speed_Restrictions))
summary(lm(formula = Restriction_Distance_Miles ~ ObjectId, data = MBTA_Rapid_Transit_Speed_Restrictions))
summary(MBTA_Rapid_Transit_Speed_Restrictions)
t.test(MBTA_Rapid_Transit_Speed_Restrictions)
t.test(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles)
t.test(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
xlab("Fitted") +
ylab("Residual")
# Extract Restriction Distance MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Distance_Miles"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
# Create new plot for SR speed for Jan and Feb
MBTAtotalplot <- ggplot(SRspeed)
# Create linear regression model
MBTAtotalplot + geom_point(aes(ObjectID, Restriction_Distance_Miles)) +
geom_smooth(aes(ObjectID, Restriction_Distance_Miles), method = "lm", formula = y~x) +
xlab("Speed Restriction Report ID") +
ylab("Restriction Distance in Miles")
# barplot for restriction distance in both months
MBTAplot + geom_bar(aes(ObjectId, Restriction_Distance_Miles, fill = Restriction_Distance_Miles), stat = "identity") +
guides(fill="none") +
xlab("Speed Restriction Report ID") +
ylab("Restriction Distance in Miles") +
scale_x_continuous(breaks = seq(0, 70, 5)) +
scale_y_continuous(breaks = seq(0, 0.3, 0.02)) +
geom_smooth(aes(ObjectId, Restriction_Distance_Miles), method = "lm")
MBTAplot2 + geom_bar(aes(ObjectId, Restriction_Distance_Miles, fill = Restriction_Distance_Miles), stat = "identity") +
guides(fill="none") +
xlab("Speed Restriction Report ID") +
ylab("Restriction Distance in Miles") +
scale_x_continuous(breaks = seq(0, 168, 5), guide = guide_axis(n.dodge = 3)) +
scale_y_continuous(breaks = seq(0, 1, 0.05)) +
geom_smooth(aes(ObjectId, Restriction_Distance_Miles), method = "lm")
# barplot for restriction distance in both months
MBTAplot + geom_bar(aes(ObjectId, Restriction_Distance_Miles, fill = Restriction_Distance_Miles), stat = "identity") +
guides(fill="none") +
xlab("Speed Restriction Report ID") +
ylab("Restriction Distance in Miles") +
scale_x_continuous(breaks = seq(0, 70, 5)) +
scale_y_continuous(breaks = seq(0, 0.3, 0.02)) +
geom_smooth(aes(ObjectId, Restriction_Distance_Miles), method = "lm")
MBTAplot2 + geom_bar(aes(ObjectId, Restriction_Distance_Miles, fill = Restriction_Distance_Miles), stat = "identity") +
guides(fill="none") +
xlab("Speed Restriction Report ID") +
ylab("Restriction Distance in Miles") +
scale_x_continuous(breaks = seq(0, 168, 5), guide = guide_axis(n.dodge = 3)) +
scale_y_continuous(breaks = seq(0, 1, 0.05)) +
geom_smooth(aes(ObjectId, Restriction_Distance_Miles), method = "lm")
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
xlab("Fitted") +
ylab("Residual")
# Create QQ plot
ggplot(SRspeed, aes(sample = Restriction_Distance_Miles)) +
stat_qq() +
stat_qq_line()
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
xlab("Fitted") +
ylab("Residual") +
title("Fitted vs. Residual")
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
xlab("Fitted") +
ylab("Residual") +
labs(title = "Fitted vs. Residual")
# Create QQ plot
ggplot(SRspeed, aes(sample = Restriction_Distance_Miles)) +
stat_qq() +
stat_qq_line() +
title("Q-Q Plot") +
labs(title = "Fitted vs. Residual")
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
xlab("Fitted") +
ylab("Residual") +
labs(title = "Fitted vs. Residual")
# Create QQ plot
ggplot(SRspeed, aes(sample = Restriction_Distance_Miles)) +
stat_qq() +
stat_qq_line() +
title("Q-Q Plot") +
labs(title = "Fitted vs. Residual")
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
xlab("Fitted") +
ylab("Residual") +
labs(title = "Fitted vs. Residual")
# Create QQ plot
ggplot(SRspeed, aes(sample = Restriction_Distance_Miles)) +
stat_qq() +
stat_qq_line() +
labs(title = "Fitted vs. Residual")
# Residuals vs. fitted
model <- lm(ObjectID ~ Restriction_Distance_Miles, SRspeed)
ggplot(model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
xlab("Fitted") +
ylab("Residual") +
labs(title = "Fitted vs. Residual")
# Create QQ plot
ggplot(SRspeed, aes(sample = Restriction_Distance_Miles)) +
stat_qq() +
stat_qq_line() +
labs(title = "Q-Q Plot")
summary(lm(formula = Restriction_Distance_Miles ~ ObjectId, data = MBTA_Rapid_Transit_Speed_Restrictions))
summary(lm(formula = Restriction_Distance_Miles ~ ObjectId, data = MBTA_Rapid_Transit_Speed_Restrictions))
summary(lm(formula = Restriction_Distance_Miles ~ ObjectId, data = MBTA_Rapid_Transit_Speed_Restrictions))
View(MBTA_Rapid_Transit_Speed_Restrictions)
knitr::opts_chunk$set(echo = TRUE)
summary(lm(formula = Restriction_Distance_Miles ~ ObjectId, data = MBTA_Rapid_Transit_Speed_Restrictions))
summary(lm(formula = Restriction_Distance_Miles ~ ObjectId, data = SRspeed))
summary(lm(formula = Restriction_Distance_Miles ~ ObjectID, data = SRspeed))
# Extract Restriction Distance MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)))
SRdistance <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles))))
# Unlist the data frame and omit NA values
SRdistance <- as.data.frame(unlist(SRdistance))
SRdistance <- na.omit(SRdistance)
# Rename column to Restriction Speed MPH
colnames(SRdistance)[1] = "Restriction_Distance_Miles"
# Create objectid column
SRdistance$ObjectID <- seq(1, 238)
# Create new plot for SR speed for Jan and Feb
MBTAtotalplot <- ggplot(SRdistance)
library(ggplot2)
# Extract Restriction Distance MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles)))
SRdistance <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Distance_Miles))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Distance_Miles))))
# Unlist the data frame and omit NA values
SRdistance <- as.data.frame(unlist(SRdistance))
SRdistance <- na.omit(SRdistance)
# Rename column to Restriction Speed MPH
colnames(SRdistance)[1] = "Restriction_Distance_Miles"
# Create objectid column
SRdistance$ObjectID <- seq(1, 238)
# Create new plot for SR speed for Jan and Feb
MBTAtotalplot <- ggplot(SRdistance)
# Create linear regression model
MBTAtotalplot + geom_point(aes(ObjectID, Restriction_Distance_Miles)) +
geom_smooth(aes(ObjectID, Restriction_Distance_Miles), method = "lm", formula = y~x) +
xlab("Speed Restriction Report ID") +
ylab("Restriction Distance in Miles")
# Extract Restriction Speed MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Speed_MPH"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
summary(lm(formula = Restriction_Distance_Miles ~ ObjectID, data = SRspeed))
# Extract Restriction Speed MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Speed_MPH"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
summary(lm(formula = Restriction_Speed_MPH ~ ObjectID, data = SRspeed))
t.test(SRspeed)
# Extract Restriction Speed MPH columns
max_length <- max(c(length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH), length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH)))
SRspeed <- data.frame(col1 = c(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH, rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions$Restriction_Speed_MPH))),
col2 = c(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH,
rep(NA, max_length - length(MBTA_Rapid_Transit_Speed_Restrictions_February_2023$Restriction_Speed_MPH))))
# Unlist the data frame and omit NA values
SRspeed <- as.data.frame(unlist(SRspeed))
SRspeed <- na.omit(SRspeed)
# Rename column to Restriction Speed MPH
colnames(SRspeed)[1] = "Restriction_Speed_MPH"
# Create objectid column
SRspeed$ObjectID <- seq(1, 238)
summary(lm(formula = Restriction_Speed_MPH ~ ObjectID, data = SRspeed))
t.test(SRspeed)
View(SRspeed)
# Violin plot of max restriction speed per branch in January
MBTAplot <- geom_violin(aes(factor(Branch), Restriction_Speed_MPH, fill = Restriction_Distance_Miles))
library(ggplot2)
# base plots
MBTAplot <- ggplot(MBTA_Rapid_Transit_Speed_Restrictions)
MBTAplot2 <- ggplot(MBTA_Rapid_Transit_Speed_Restrictions_February_2023)
# Create bar plot, summing total restriction distance in miles
MBTAplot +
geom_histogram(aes(factor(Line,
levels = c("Mattapan Line", "Orange Line",
"Red Line", "Green Line")),
y = sum(Restriction_Distance_Miles)),
stat = "identity") +
scale_y_continuous(breaks = seq(0, 250, 10)) +
xlab("Line") +
ylab("Restriction Distance in Miles")
# Create bar plot, summing total track distance in miles
MBTAplot +
geom_histogram(aes(factor(Line,
levels = c("Mattapan Line", "Orange Line",
"Red Line", "Green Line")),
y = sum(Total_Track_Miles)),
stat = "identity") +
scale_y_continuous(breaks = seq(0, 50000, 5000)) +
xlab("Line") +
ylab("Total Track Distance in Miles")
# Violin plot of max restriction speed per branch in January
MBTAplot + geom_violin(aes(factor(Branch), Restriction_Speed_MPH, fill = Restriction_Distance_Miles))
MBTAplot + geom_violin(aes(factor(Branch), Restriction_Speed_MPH, fill = Restriction_Distance_Miles))
# Violin plot of max restriction speed per branch in January
MBTAplot + geom_boxplot(aes(factor(Branch), Restriction_Speed_MPH, fill = Restriction_Distance_Miles))
# Violin plot of max restriction speed per branch in January
MBTAplot + geom_boxplot(aes(factor(Branch), Restriction_Speed_MPH, fill = Restriction_Distance_Miles))
# Violin plot of max restriction speed per branch in January
MBTAplot + geom_boxplot(aes(factor(Branch), Restriction_Distance_Miles, fill = Restriction_Speed_MPH))
# Violin plot of max restriction speed per branch in January
MBTAplot + geom_density(aes(ObjectId, after_stat(count), fill = Restriction_Speed_MPH))
# Violin plot of max restriction speed per branch in January
MBTAplot + geom_density(aes(ObjectId, after_stat(count), fill = Restriction_Speed_MPH), position = "fill")
# Violin plot of max restriction speed per branch in January
MBTAplot + geom_density(aes(Restriction_Speed_MPH, after_stat(count), fill = Branch), position = "fill")
# Density plot of max restriction speed per branch in January
MBTAplot + geom_density(aes(Restriction_Speed_MPH, fill = Branch), position = "fill")
# Density plot of max restriction speed per branch in January
MBTAplot + geom_density(aes(Restriction_Speed_MPH, after_stat(count), fill = Branch), position = "fill")
# Density plot of max restriction speed per branch in January
MBTAplot + geom_density(aes(Restriction_Speed_MPH, after_stat(count), fill = Branch), position = "fill") +
xlab("Restriction Speed (mph)")
# Density plot of max restriction speed per branch in January
MBTAplot + geom_density(aes(Restriction_Speed_MPH, after_stat(count), fill = Branch), position = "fill") +
xlab("Restriction Speed (mph)")
knitr::opts_chunk$set(echo = TRUE)
# Plot jitter graph for Line, Branch, and Restriction Reason
MBTAplot +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
scale_color_discrete(name = "Restriction Reason",
labels = c('Construction Work', 'Track Wear and Tear', 'Vehicle Blockage')) +
labs(title = "January") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
library(ggplot2)
# Plot jitter graph for Line, Branch, and Restriction Reason
MBTAplot +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
scale_color_discrete(name = "Restriction Reason",
labels = c('Construction Work', 'Track Wear and Tear', 'Vehicle Blockage')) +
labs(title = "January") +
scale_x_discrete(guide = guide_axis(n.dodge = 2))
MBTAplot2 +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
scale_color_discrete(name = "Restriction Reason",
labels = c('Construction Work', 'Track Wear and Tear',
'Vehicle Blockage')) +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
labs(title = "February")
# Plot jitter graph for Line, Branch, and Restriction Reason
MBTAplot +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
scale_color_discrete(name = "Restriction Reason",
labels = c('Construction Work', 'Track Wear and Tear', 'Vehicle Blockage')) +
labs(title = "January") +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
guides(fill="none")
MBTAplot2 +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
scale_color_discrete(name = "Restriction Reason",
labels = c('Construction Work', 'Track Wear and Tear',
'Vehicle Blockage')) +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
labs(title = "February")
# Plot jitter graph for Line, Branch, and Restriction Reason
MBTAplot +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
labs(title = "January") +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
guides(fill="none")
MBTAplot2 +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
scale_color_discrete(name = "Restriction Reason",
labels = c('Construction Work', 'Track Wear and Tear',
'Vehicle Blockage')) +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
labs(title = "February")
# Plot jitter graph for Line, Branch, and Restriction Reason
MBTAplot +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
scale_color_discrete(name = "Restriction Reason",
labels = c('Construction Work', 'Track Wear and Tear', 'Vehicle Blockage')) +
labs(title = "January") +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
theme(legend.position="none")
MBTAplot2 +
geom_jitter(aes(Line, Branch,
color = factor(Restriction_Reason)), width = 0.4,
height = 0.4,
stat = "identity") +
scale_color_discrete(name = "Restriction Reason",
labels = c('Construction Work', 'Track Wear and Tear',
'Vehicle Blockage')) +
scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
labs(title = "February")
knitr::opts_chunk$set(echo = TRUE)
summary(lm(formula = Restriction_Distance_Miles ~ ObjectID, data = SRdistance))
knitr::opts_chunk$set(echo = TRUE)
JanSR <- read_csv("Speed_Restrictions_by_Day/2023-01_Speed_Restrictions_By_Day.csv")
# import the data sets
library(readr)
JanSR <- read_csv("Speed_Restrictions_by_Day/2023-01_Speed_Restrictions_By_Day.csv")
View(JanSR)
FebSR <- read_csv("Speed_Restrictions_by_Day/2023-02_Speed_Restrictions_By_Day.csv")
MarSR <- read_csv("Speed_Restrictions_by_Day/2023-03_Speed_Restrictions_By_Day.csv")
AprSR <- read_csv("Speed_Restrictions_by_Day/2023-04_Speed_Restrictions_By_Day.csv")
View(FebSR)
library(dplyr)
# remove characters from restriction speed column and convert to numeric
JanSR$Restriction_Speed_MPH <- gsub(" mph","", as.character(JanSR$Restriction_Speed_MPH)) %>%
as.numeric(JanSR$Restriction_Speed_MPH)
View(JanSR)
# import the data sets for January through April
library(readr)
library(dplyr)
JanSR <- read_csv("Speed_Restrictions_by_Day/2023-01_Speed_Restrictions_By_Day.csv")
FebSR <- read_csv("Speed_Restrictions_by_Day/2023-02_Speed_Restrictions_By_Day.csv")
MarSR <- read_csv("Speed_Restrictions_by_Day/2023-03_Speed_Restrictions_By_Day.csv")
AprSR <- read_csv("Speed_Restrictions_by_Day/2023-04_Speed_Restrictions_By_Day.csv")
# remove characters from restriction speed column and convert to numeric
JanSR$Restriction_Speed_MPH <- gsub(" mph","", as.character(JanSR$Restriction_Speed_MPH)) %>%
as.numeric(JanSR$Restriction_Speed_MPH)
FebSR$Restriction_Speed_MPH <- gsub(" mph","", as.character(FebSR$Restriction_Speed_MPH)) %>%
as.numeric(FebSR$Restriction_Speed_MPH)
MarSR$Restriction_Speed_MPH <- gsub(" mph","", as.character(MarSR$Restriction_Speed_MPH)) %>%
as.numeric(MarSR$Restriction_Speed_MPH)
AprSR$Restriction_Speed_MPH <- gsub(" mph","", as.character(AprSR$Restriction_Speed_MPH)) %>%
as.numeric(AprSR$Restriction_Speed_MPH)
